{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "7f79baf9",
   "metadata": {},
   "source": [
    "# ADS 509 Assignment 2.1: Tokenization, Normalization, Descriptive Statistics \n",
    "\n",
    "This notebook holds Assignment 2.1 for Module 2 in ADS 509, Applied Text Mining. Work through this notebook, writing code and answering questions where required. \n",
    "\n",
    "In the previous assignment you put together Twitter data and lyrics data on two artists. In this assignment we explore some of the textual features of those data sets. If, for some reason, you did not complete that previous assignment, data to use for this assignment can be found in the assignment materials section of Blackboard. \n",
    "\n",
    "This assignment asks you to write a short function to calculate some descriptive statistics on a piece of text. Then you are asked to find some interesting and unique statistics on your corpora. \n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aae8e2e1",
   "metadata": {},
   "source": [
    "## General Assignment Instructions\n",
    "\n",
    "These instructions are included in every assignment, to remind you of the coding standards for the class. Feel free to delete this cell after reading it. \n",
    "\n",
    "One sign of mature code is conforming to a style guide. We recommend the [Google Python Style Guide](https://google.github.io/styleguide/pyguide.html). If you use a different style guide, please include a cell with a link. \n",
    "\n",
    "Your code should be relatively easy-to-read, sensibly commented, and clean. Writing code is a messy process, so please be sure to edit your final submission. Remove any cells that are not needed or parts of cells that contain unnecessary code. Remove inessential `import` statements and make sure that all such statements are moved into the designated cell. \n",
    "\n",
    "Make use of non-code cells for written commentary. These cells should be grammatical and clearly written. In some of these cells you will have questions to answer. The questions will be marked by a \"Q:\" and will have a corresponding \"A:\" spot for you. *Make sure to answer every question marked with a `Q:` for full credit.* \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "e2d096b7",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import re\n",
    "import emoji\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "\n",
    "from collections import Counter, defaultdict\n",
    "from nltk.corpus import stopwords\n",
    "from string import punctuation\n",
    "\n",
    "sw = stopwords.words(\"english\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "6b555ab2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Add any additional import statements you need here\n",
    "import string\n",
    "import matplotlib.pyplot as plt\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "923b5a86",
   "metadata": {},
   "outputs": [],
   "source": [
    "# change `data_location` to the location of the folder on your machine.\n",
    "data_location = \"/users/landonpadgett/Desktop/M1 Results/\" \n",
    "\n",
    "twitter_folder = \"/users/landonpadgett/Desktop/M1 Results/twitter/\"\n",
    "lyrics_folder = \"/users/landonpadgett/Desktop/M1 Results/lyrics/\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "06522af9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Processing file: /users/landonpadgett/Desktop/M1 Results/twitter/cher_followers_data.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/twitter/robynkonichiwa_followers_data.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/twitter/cher_followers.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/twitter/robynkonichiwa_followers.txt\n",
      "Twitter Data Stats:\n",
      "There are 58532931 tokens in the data.\n",
      "There are 12777699 unique tokens in the data.\n",
      "There are 368240283 characters in the data.\n",
      "The lexical diversity is 0.218 in the data.\n",
      "The 5 most common tokens are:\n",
      "and: 598725\n",
      "a: 409768\n",
      "the: 400525\n",
      "I: 393219\n",
      "of: 365284\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_includemeout.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_electric.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_beach2k20.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_lovekills.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_timemachine.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_lovekills114524.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_givingyouback.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_noneofdem114527.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_noneofdem.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_bemine.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_fembot114519.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_shouldhaveknown.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_underneaththeheart.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_eclipse.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_robynishere.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_dontstopthemusic.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_criminalintent.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_myonlyreason.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_humanbeing.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_obaby.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_how.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_loveisfree.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_longgone.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_indestructibleacousticversion.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_hangwithme.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_shouldhaveknown106828.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_moonlight.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_getmyselftogether.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_universalwoman.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_bumpyride.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_sayit.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_callyourgirlfriend.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_tellyoutoday.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_whosthatgirl.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_aintnothing.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_dancingonmyown114521.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_mainthing.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_crywhenyougetolder.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_dancehallqueen114530.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_fembot.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_everagain.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_mondaymorning.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_inmyeyes.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_dancingonmyown.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_showmelove.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_buffalostance.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_jackuoff.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_psycho.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_iwish.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_betweenthelines.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_wedancetothebeat114528.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_dancehallqueen.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_dontwantyouback.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_dontfuckingtellmewhattodo.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_inmyheart.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_losecontrol.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_anytimeyoulike.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_wheredidourlovego.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_justanothergirlfriend.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_cobrastyle.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_jagvetendejligrosa.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_healthylove.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_doitagain.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_witheveryheartbeat.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_babyforgiveme.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_ushouldknowbetter114529.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_curriculumvitae.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_monument.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_ushouldknowbetter.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_becauseitsinthemusic.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_bumlikeyou.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_setmefree.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_keepthisfireburning.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_indestructible.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_mytruth.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_dontfuckingtellmewhattodo114520.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_hangwithme114525.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_stars4ever.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_stillyourgirl.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_88days.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_youvegotthatsomething.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_blowmymind.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_handleme.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_sendtorobinimmediately.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_hangwithmeacousticversion.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_bigcity.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_konichiwabitches.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_doyouknowwhatittakes.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_inmyeyes114532.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_gottoworkitout.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_bionicwoman.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_tomteverkstan.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_herewego.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_robotboy.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_honey.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_crashandburngirl.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_everylittlething.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_notontheinside.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_wedancetothebeat.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_doyoureallywantmeshowrespect.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_thelasttime.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_missingu.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_breakdownintermission.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/robyn/robyn_play.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_comeandstaywithme.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_pirate.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_stars.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_thesedays.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_lovesohigh.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_downdowndown.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_youvemademesoveryhappy.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_julie.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_reasontobelieve.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_disastercake.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_taxitaxi.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_dovelamore.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_stillinlovewithyou.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_aliveagain.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_jolsonmedley.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_mylove.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_untilitstimeforyoutogo.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_dontthinktwice.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_takinbackmyheart.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_reallove.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_sistersofmercy.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_darklady.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_livinginahousedivided.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_youtakeitall.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_borrowedtime.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_awomansstory.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_olmanriver.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_themanthatgotaway.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_ayounggirluneenfante.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_oogaboo.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_thetwelfthofnever.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_therebutforfortune.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_takemeforalittlewhile.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_themanilove.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_mommalooksharp.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_whataboutthemoonlight.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_loveenough.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_italladdsupnow.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_ourladyofsanfrancisco.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_earlymorningstrangers.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_emotionalfire.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_bangbang.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_bodytobodyhearttoheart.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_mainman.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_easytobehard.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_ificouldturnbacktime.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_howcanyoumendabrokenheart.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_onebyone.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_carnival.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_fernando.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_runaway.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_thewinnertakesitall.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_iknowyoudontloveme.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_runnin.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_88degrees.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_thunderstorm.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_flashback.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_ithrewitallaway.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_crylikeababy.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_red.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_heyjoe.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_thelongandwindingroad.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_donthideyourlove.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_thebellsofrhymney.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_mirrorimage.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_aworldwithoutheroes.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_howlonghasthisbeengoingon.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_loveoneanother.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_sos.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_willyoulovemetomorrow.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_catchthewind.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_dixiegirl.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_pride.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_whywasiborn.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_alfie.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_warpaintandsoftfeathers.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_womansworld.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_youbettersitdownkids.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_takeitlikeaman.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_weregonnamakeit.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_hewasbeautiful.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_shapeofthingstocome.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_strongenough.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_themusicsnogoodwithoutyou.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_allornothing.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_sunny.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_dangeroustimes.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_willyouwaitforme.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_itsamansmansmansworld.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_letthisbealessontoyou.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_piedpiper.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_needlesandpins.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_laplane.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_tonightillbestayingherewithyou.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_withorwithoutyou.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_mamawhenmydollieshavebabies.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_halfbreed.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_walkinginmemphis.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_oneofus.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_whoyougonnabelieve.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_illneverstoplovingyou.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_thecruelwar.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_wheredoyougo.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_perfection.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_island.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_again.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_mastersofwar.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_doesanybodyreallyfallinloveanymore.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_hellonwheels.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_rainrain.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_igotitbadandthataintgood.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_mysongtoofargone.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_notenoughloveintheworld.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_whatllido.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_dixie.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_skindeep.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_dorightwomandorightman.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_iwillwaitforyou.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_homewardbound.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_thebiggertheycomethehardertheyfall.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_loveisthegroove.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_milord.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_iwasntready.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_silverwingsgoldenrings.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_afterall.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_iminthemiddle.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_weallsleepalone.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_itsnotunusual.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_buticantloveyoumore.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_itmightaswellstaymondayfromnowon.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_justthisonetime.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_ilovemakinlovetoyou.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_sirens.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_fireandrain.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_singforyoursupper.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_behindthedoor.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_touchandgo.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_moveme.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_saveupallyourtears.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_loveme.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_spring.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_nevershouldvestarted.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_waterloo.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_happywasthedaywemet.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_youhaventseenthelastofme.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_itgetsmewhereiwanttogo.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_loveandunderstanding.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_shelovestohearthemusic.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_lookatme.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_whenyoufindoutwhereyouregoinletmeknow.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_isawamanandhedancedwithhiswife.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_heartofstone.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_davidssong.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_dancingqueen.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_still.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_sendthemanover.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_rescueme.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_youvereallygotaholdonme.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_outrageous.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_dowhatyougottado.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_holysmoke.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_rockandrolldoctor.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_twopeopleclingingtoathread.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_mrsoul.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_thegirlfromipanema.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_walls.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_thegunman.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_idonthavetosleeptodream.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_amiblue.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_canyoufool.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_whenloversbecomestrangers.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_iwalkonguildedsplinters.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_houseisnotahome.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_clicksong.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_paradiseishere.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_bellbottomblues.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_likearollingstone.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_walkwithme.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_songforyou.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_whenyouwalkaway.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_angelsrunning.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_loveisalonelyplacewithoutyou.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_yoursuntiltomorrow.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_ihatetosleepalone.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_superstar.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_justenoughtokeepmehanginon.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_makethemanloveme.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_workinggirl.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_youngandpretty.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_misssubwayof1952.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_impossibledream.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_theshoopshoopsongitsinhiskiss.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_gitdownguitargroupie.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_thethoughtoflovingyou.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_knockonwood.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_bangbangmybabyshotmedown.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_applesdontfallfarfromthetree.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_blowininthewind.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_thesamemistake.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_games.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_thesunaintgonnashineanymore.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_adifferentkindoflovesong.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_hellneverknow.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_idratherbelieveinyou.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_prisoner.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_gonow.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_morethanyouknow.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_melody.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_couldvebeenyou.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_thefirsttime.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_lovehurts312103.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_thepower.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_ourdaywillcome.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_fernando710922.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_neverbeentospain.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_laybabylay.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_youdonthavetosayyouloveme.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_itsacryinshame.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_gypsiestrampsandthieves.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_carouselman.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_chiquititaspanishversion.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_favouritescars.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_justlikejessejames.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_girldontcome.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_thegreatestsongieverheard.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_mammamia.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_iparalyze.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_savethechildren.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_gimmegimmegimmeamanaftermidnight.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_rudy.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_firesofeden.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_bornwiththehunger.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_cometoyourwindow.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_kisstokiss.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_ifoundyoulove.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_geronimoscadillac.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_believe.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_imblowinaway.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_igotosleep.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_saytheword.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_crymyselftosleep.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_ibelieve.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_thewayoflove.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_chiquitita.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_lovepaintheresapaininmyheart.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_iwantyou.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_longdistanceloveaffair.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_thisisasongforthelonely.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_songcalledchildren.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_welcometoburlesque.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_ifeelsomethingintheairmagicintheair.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_mylove318663.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_ifoundsomeone.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_trainofthought.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_lovethedeviloutofya.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_boysandgirls.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_bymyself.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_dannyboy.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_iwouldnttreatadogthewayyoutreatedme.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_doyoubelieveinmagic.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_doievercrossyourmind.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_youknowit.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_heaintheavyhesmybrother.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_dressedtokill.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_igotyoubabe.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_whenthemoneysgone.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_thefallkurtsblues.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_whentheloveisgone.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_itstoolatetolovemenow.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_dontcomearoundtonight.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_inforthenight.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_weallflyhome.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_thetimestheyareachangin.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_letmedowneasy.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_happinessisjustathingcalledjoe.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_fittofly.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_onesmallstep.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_shoppin.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_chastitysun.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_fastcompany.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_elusivebutterfly.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_giveourloveafightinchance.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_justwhativebeenlookinfor.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_donttrytoclosearose.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_saywhatsonyourmind.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_thenameofthegame.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_allireallywanttodo.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_whenlovecallsyourname.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_sittinonthedockofthebay.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_ifiknewthen.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_thegreatestthing.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_allbecauseofyou.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_onehonestman.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_loversforever.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_lovehurts.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_forwhatitsworth.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_holdinoutforlove.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_takemehome.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_thebookoflove.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_chastityssongbandofthieves.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_startingover.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_shadowdreamsong.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_wasntitgood.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_youwouldntknowlove.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_thisgodforsakenday.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_time.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_iwalkalone.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_lietome.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_backonthestreetagain.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_loveonarooftop.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_hardenoughgettingoveryou.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_takeitfromtheboys.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_dreambaby.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_pleasedonttellme.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_ihopeyoufindit.txt\n",
      "Processing file: /users/landonpadgett/Desktop/M1 Results/lyrics/cher/cher_classified1a.txt\n",
      "\n",
      "Lyrics Data Stats:\n",
      "There are 99415 tokens in the data.\n",
      "There are 7674 unique tokens in the data.\n",
      "There are 391566 characters in the data.\n",
      "The lexical diversity is 0.077 in the data.\n",
      "The 5 most common tokens are:\n",
      "I: 3480\n",
      "you: 3427\n",
      "the: 2942\n",
      "to: 2174\n",
      "me: 1881\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[99415, 7674, 0.07719157068852789, 391566]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def read_file(file_path):\n",
    "    \"\"\"Reads the content of a file and returns it as a string.\"\"\"\n",
    "    with open(file_path, 'r', encoding='utf-8') as file:\n",
    "        return file.read()\n",
    "\n",
    "# Function to process all files in a folder, including subfolders\n",
    "def process_folder(folder_path):\n",
    "    \"\"\"Processes all .txt files in a folder and its subfolders, returns tokenized text as a list of words.\"\"\"\n",
    "    all_data = \"\"\n",
    "    # Walk through all subfolders and files\n",
    "    for root, dirs, files in os.walk(folder_path):\n",
    "        for file in files:\n",
    "            if file.endswith(\".txt\"):  # Only process .txt files\n",
    "                file_path = os.path.join(root, file)\n",
    "                print(f\"Processing file: {file_path}\")  # Debugging output\n",
    "                all_data += read_file(file_path) + \" \"\n",
    "    return all_data.split()  # Tokenize by splitting on whitespace\n",
    "\n",
    "\n",
    "def descriptive_stats(tokens, num_tokens=5, verbose=True):\n",
    "    \"\"\"\n",
    "    Given a list of tokens, print number of tokens, number of unique tokens, \n",
    "    number of characters, lexical diversity (https://en.wikipedia.org/wiki/Lexical_diversity), \n",
    "    and num_tokens most common tokens. Return a list with the number of tokens, \n",
    "    number of unique tokens, lexical diversity, and number of characters. \n",
    "    \"\"\"\n",
    "    # Total number of tokens\n",
    "    total_tokens = len(tokens)\n",
    "    \n",
    "    # Number of unique tokens\n",
    "    num_unique_tokens = len(set(tokens))\n",
    "    \n",
    "    # Lexical diversity\n",
    "    lexical_diversity = num_unique_tokens / total_tokens if total_tokens > 0 else 0\n",
    "    \n",
    "    # Number of characters\n",
    "    num_characters = sum(len(token) for token in tokens)\n",
    "    \n",
    "    # Find the most common tokens\n",
    "    token_counts = Counter(tokens)\n",
    "    most_common_tokens = token_counts.most_common(num_tokens)\n",
    "    \n",
    "    if verbose:\n",
    "        print(f\"There are {total_tokens} tokens in the data.\")\n",
    "        print(f\"There are {num_unique_tokens} unique tokens in the data.\")\n",
    "        print(f\"There are {num_characters} characters in the data.\")\n",
    "        print(f\"The lexical diversity is {lexical_diversity:.3f} in the data.\")\n",
    "        print(f\"The {num_tokens} most common tokens are:\")\n",
    "        for token, count in most_common_tokens:\n",
    "            print(f\"{token}: {count}\")\n",
    "    \n",
    "    return [total_tokens, num_unique_tokens, lexical_diversity, num_characters]\n",
    "\n",
    "# Paths to Twitter and Lyrics folders\n",
    "data_location = \"/users/landonpadgett/Desktop/M1 Results/\"\n",
    "twitter_folder = os.path.join(data_location, \"twitter/\")\n",
    "lyrics_folder = os.path.join(data_location, \"lyrics/\")\n",
    "\n",
    "# Process and analyze Twitter data\n",
    "twitter_tokens = process_folder(twitter_folder)\n",
    "print(\"Twitter Data Stats:\")\n",
    "descriptive_stats(twitter_tokens, verbose=True)\n",
    "\n",
    "# Process and analyze Lyrics data (including subfolders like cher/ and robyn/)\n",
    "lyrics_tokens = process_folder(lyrics_folder)\n",
    "print(\"\\nLyrics Data Stats:\")\n",
    "descriptive_stats(lyrics_tokens, verbose=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "59dcf058",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "There are 13 tokens in the data.\n",
      "There are 9 unique tokens in the data.\n",
      "There are 55 characters in the data.\n",
      "The lexical diversity is 0.692 in the data.\n",
      "The 5 most common tokens are:\n",
      "text: 3\n",
      "here: 2\n",
      "example: 2\n",
      "is: 1\n",
      "some: 1\n"
     ]
    }
   ],
   "source": [
    "text = \"\"\"here is some example text with other example text here in this text\"\"\".split()\n",
    "assert(descriptive_stats(text, verbose=True)[0] == 13)\n",
    "assert(descriptive_stats(text, verbose=False)[1] == 9)\n",
    "assert(abs(descriptive_stats(text, verbose=False)[2] - 0.69) < 0.02)\n",
    "assert(descriptive_stats(text, verbose=False)[3] == 55)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d2e7e1a2",
   "metadata": {},
   "source": [
    "Q: Why is it beneficial to use assertion statements in your code? \n",
    "\n",
    "A: Assertion statatements are hekpful in ensuring certain code conditions are accurate, and if they aren't, the points in the code where these inaccuracies are occurring are highlighted, allowing for a streamlined debugging process. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9d3bf93e",
   "metadata": {},
   "source": [
    "## Data Input\n",
    "\n",
    "Now read in each of the corpora. For the lyrics data, it may be convenient to store the entire contents of the file to make it easier to inspect the titles individually, as you'll do in the last part of the assignment. In the solution, I stored the lyrics data in a dictionary with two dimensions of keys: artist and song. The value was the file contents. A data frame would work equally well. \n",
    "\n",
    "For the Twitter data, we only need the description field for this assignment. Feel free all the descriptions read it into a data structure. In the solution, I stored the descriptions as a dictionary of lists, with the key being the artist. \n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "37d70801",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Lyrics read in\n",
    "\n",
    "def read_lyrics_data(folder_path):\n",
    "    lyrics_data = {}\n",
    "    for artist in os.listdir(folder_path):\n",
    "        artist_folder = os.path.join(folder_path, artist)\n",
    "        if os.path.isdir(artist_folder):\n",
    "            lyrics_data[artist] = {}\n",
    "            for song_file in os.listdir(artist_folder):\n",
    "                if song_file.endswith(\".txt\"):\n",
    "                    song_path = os.path.join(artist_folder, song_file)\n",
    "                    with open(song_path, 'r', encoding='utf-8') as file:\n",
    "                        song_title = os.path.splitext(song_file)[0]\n",
    "                        lyrics_data[artist][song_title] = file.read()\n",
    "    return lyrics_data\n",
    "\n",
    "lyrics_folder = \"/users/landonpadgett/Desktop/M1 Results/lyrics/\"\n",
    "lyrics_data = read_lyrics_data(lyrics_folder)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "debcac5a",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Twitter read in\n",
    "\n",
    "def read_twitter_data(folder_path):\n",
    "    twitter_data = {}\n",
    "    for twitter_file in os.listdir(folder_path):\n",
    "        if twitter_file.endswith(\".txt\"):\n",
    "            artist = os.path.splitext(twitter_file)[0]\n",
    "            twitter_data[artist] = []\n",
    "            file_path = os.path.join(folder_path, twitter_file)\n",
    "            with open(file_path, 'r', encoding='utf-8') as file:\n",
    "                for line in file:\n",
    "                    description = line.strip()\n",
    "                    if description:\n",
    "                        twitter_data[artist].append(description)\n",
    "    return twitter_data\n",
    "\n",
    "twitter_folder = \"/users/landonpadgett/Desktop/M1 Results/twitter/\"\n",
    "twitter_data = read_twitter_data(twitter_folder)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6a5f3b12",
   "metadata": {},
   "source": [
    "## Data Cleaning\n",
    "\n",
    "Now clean and tokenize your data. Remove punctuation chacters (available in the `punctuation` object in the `string` library), split on whitespace, fold to lowercase, and remove stopwords. Store your cleaned data, which must be accessible as an interable for `descriptive_stats`, in new objects or in new columns in your data frame. \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "71c73d86",
   "metadata": {},
   "outputs": [],
   "source": [
    "punctuation = set(punctuation) # speeds up comparison"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "b327033a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Artist: cher_followers_data\n",
      "  Cleaned description: ['screenname', 'name', 'id', 'location', 'followerscount', 'friendscount', 'description']\n",
      "  Cleaned description: ['hsmcnp', 'country', 'girl', '35152213', '1302', '1014']\n",
      "Artist: robynkonichiwa_followers_data\n",
      "  Cleaned description: ['screenname', 'name', 'id', 'location', 'followerscount', 'friendscount', 'description']\n",
      "  Cleaned description: ['angelxoarts', 'angelxo', '1424055675030806529', 'zacatlan', 'puebla', 'mexico', '29', '535', 'love', 'chill', '•facebook', 'instagram', 'soundcloud', 'angelxoarts•', 'httpstco447okklkza…']\n",
      "Artist: cher_followers\n",
      "  Cleaned description: ['id']\n",
      "  Cleaned description: ['35152213']\n",
      "Artist: robynkonichiwa_followers\n",
      "  Cleaned description: ['id']\n",
      "  Cleaned description: ['1424055675030806529']\n"
     ]
    }
   ],
   "source": [
    "#Twitter cleaning\n",
    "\n",
    "stop_words = set(stopwords.words('english'))\n",
    "\n",
    "# Function to clean and tokenize Twitter descriptions\n",
    "def clean_twitter_data(twitter_data):\n",
    "    \"\"\"Cleans and tokenizes the Twitter descriptions by removing punctuation, stopwords, and lowercasing.\"\"\"\n",
    "    cleaned_data = {}\n",
    "    for artist, descriptions in twitter_data.items():\n",
    "        cleaned_descriptions = []\n",
    "        for description in descriptions:\n",
    "            # Remove punctuation\n",
    "            description = description.translate(str.maketrans(\"\", \"\", string.punctuation))\n",
    "            \n",
    "            # Convert to lowercase\n",
    "            description = description.lower()\n",
    "            \n",
    "            # Split on whitespace to tokenize\n",
    "            tokens = description.split()\n",
    "            \n",
    "            # Remove stopwords\n",
    "            tokens = [word for word in tokens if word not in stop_words]\n",
    "            \n",
    "            cleaned_descriptions.append(tokens)\n",
    "        \n",
    "        cleaned_data[artist] = cleaned_descriptions\n",
    "    \n",
    "    return cleaned_data\n",
    "\n",
    "cleaned_twitter_data = clean_twitter_data(twitter_data)\n",
    "\n",
    "for artist, descriptions in cleaned_twitter_data.items():\n",
    "    print(f\"Artist: {artist}\")\n",
    "    for description in descriptions[:2]:  \n",
    "        print(f\"  Cleaned description: {description}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "e0f22e10",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Artist: robyn\n",
      "  Song: robyn_includemeout\n",
      "  Cleaned lyrics: ['include', 'really', 'simple', 'single', 'pulse', 'repeated', 'regular', 'interval', 'mmm', 'hmm']\n",
      "Artist: cher\n",
      "  Song: cher_comeandstaywithme\n",
      "  Cleaned lyrics: ['come', 'stay', 'ill', 'send', 'away', 'false', 'pride', 'ill', 'forsake', 'life']\n"
     ]
    }
   ],
   "source": [
    "#Lyrics cleaning\n",
    "\n",
    "stop_words = set(stopwords.words('english'))\n",
    "\n",
    "def clean_lyrics_data(lyrics_data):\n",
    "    cleaned_data = {}\n",
    "    for artist, songs in lyrics_data.items():\n",
    "        cleaned_data[artist] = {}\n",
    "        for song_title, lyrics in songs.items():\n",
    "            lyrics = lyrics.translate(str.maketrans(\"\", \"\", string.punctuation))  # Remove punctuation\n",
    "            lyrics = lyrics.lower()  # Convert to lowercase\n",
    "            tokens = lyrics.split()  # Tokenize by splitting on whitespace\n",
    "            tokens = [word for word in tokens if word not in stop_words]  # Remove stopwords\n",
    "            cleaned_data[artist][song_title] = tokens\n",
    "    return cleaned_data\n",
    "\n",
    "cleaned_lyrics_data = clean_lyrics_data(lyrics_data)\n",
    "\n",
    "# Example output to inspect cleaned data\n",
    "for artist, songs in cleaned_lyrics_data.items():\n",
    "    print(f\"Artist: {artist}\")\n",
    "    for song_title, tokens in songs.items():\n",
    "        print(f\"  Song: {song_title}\")\n",
    "        print(f\"  Cleaned lyrics: {tokens[:10]}\")  # Print first 10 tokens for brevity\n",
    "        break  "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f2dd0179",
   "metadata": {},
   "source": [
    "## Basic Descriptive Statistics\n",
    "\n",
    "Call your `descriptive_stats` function on both your lyrics data and your twitter data and for both artists (four total calls). "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "f0bbedd9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Descriptive stats for robyn's lyrics:\n",
      "There are 15227 tokens in the data.\n",
      "There are 2156 unique tokens in the data.\n",
      "There are 73787 characters in the data.\n",
      "The lexical diversity is 0.142 in the data.\n",
      "The 5 most common tokens are:\n",
      "know: 308\n",
      "dont: 301\n",
      "im: 299\n",
      "love: 275\n",
      "got: 251\n",
      "Top 5 words for robyn's lyrics: [('know', 308), ('dont', 301), ('im', 299), ('love', 275), ('got', 251)]\n",
      "Descriptive stats for cher's lyrics:\n",
      "There are 35916 tokens in the data.\n",
      "There are 3703 unique tokens in the data.\n",
      "There are 172634 characters in the data.\n",
      "The lexical diversity is 0.103 in the data.\n",
      "The 5 most common tokens are:\n",
      "love: 1004\n",
      "im: 513\n",
      "know: 486\n",
      "dont: 440\n",
      "youre: 333\n",
      "Top 5 words for cher's lyrics: [('love', 1004), ('im', 513), ('know', 486), ('dont', 440), ('youre', 333)]\n",
      "Descriptive stats for cher_followers_data's Twitter descriptions:\n",
      "There are 6 tokens in the data.\n",
      "There are 6 unique tokens in the data.\n",
      "There are 38 characters in the data.\n",
      "The lexical diversity is 1.000 in the data.\n",
      "The 5 most common tokens are:\n",
      "missypooh34: 1\n",
      "melissa: 1\n",
      "melendez: 1\n",
      "556532344: 1\n",
      "0: 1\n",
      "Top 5 words for cher_followers_data's Twitter descriptions: [('missypooh34', 1), ('melissa', 1), ('melendez', 1), ('556532344', 1), ('0', 1)]\n",
      "Descriptive stats for robynkonichiwa_followers_data's Twitter descriptions:\n",
      "There are 12 tokens in the data.\n",
      "There are 11 unique tokens in the data.\n",
      "There are 66 characters in the data.\n",
      "The lexical diversity is 0.917 in the data.\n",
      "The 5 most common tokens are:\n",
      "stand: 2\n",
      "takemeback: 1\n",
      "christine: 1\n",
      "15022058: 1\n",
      "new: 1\n",
      "Top 5 words for robynkonichiwa_followers_data's Twitter descriptions: [('stand', 2), ('takemeback', 1), ('christine', 1), ('15022058', 1), ('new', 1)]\n",
      "Descriptive stats for cher_followers's Twitter descriptions:\n",
      "There are 1 tokens in the data.\n",
      "There are 1 unique tokens in the data.\n",
      "There are 9 characters in the data.\n",
      "The lexical diversity is 1.000 in the data.\n",
      "The 5 most common tokens are:\n",
      "338867174: 1\n",
      "Top 5 words for cher_followers's Twitter descriptions: [('338867174', 1)]\n",
      "Descriptive stats for robynkonichiwa_followers's Twitter descriptions:\n",
      "There are 1 tokens in the data.\n",
      "There are 1 unique tokens in the data.\n",
      "There are 8 characters in the data.\n",
      "The lexical diversity is 1.000 in the data.\n",
      "The 5 most common tokens are:\n",
      "44946331: 1\n",
      "Top 5 words for robynkonichiwa_followers's Twitter descriptions: [('44946331', 1)]\n"
     ]
    }
   ],
   "source": [
    "def descriptive_stats(tokens, num_tokens=5, verbose=True):\n",
    "    total_tokens = len(tokens)\n",
    "    num_unique_tokens = len(set(tokens))\n",
    "    lexical_diversity = num_unique_tokens / total_tokens if total_tokens > 0 else 0\n",
    "    num_characters = sum(len(token) for token in tokens)\n",
    "    token_counts = Counter(tokens)\n",
    "    most_common_tokens = token_counts.most_common(num_tokens)\n",
    "    \n",
    "    if verbose:\n",
    "        print(f\"There are {total_tokens} tokens in the data.\")\n",
    "        print(f\"There are {num_unique_tokens} unique tokens in the data.\")\n",
    "        print(f\"There are {num_characters} characters in the data.\")\n",
    "        print(f\"The lexical diversity is {lexical_diversity:.3f} in the data.\")\n",
    "        print(f\"The {num_tokens} most common tokens are:\")\n",
    "        for token, count in most_common_tokens:\n",
    "            print(f\"{token}: {count}\")\n",
    "    \n",
    "    return [total_tokens, num_unique_tokens, lexical_diversity, num_characters, most_common_tokens]\n",
    "\n",
    "# Function to flatten token lists\n",
    "def flatten_tokens(data):\n",
    "    all_tokens = []\n",
    "    for content in data.values():\n",
    "        all_tokens.extend(content)\n",
    "    return all_tokens\n",
    "\n",
    "# Call descriptive_stats for lyrics data\n",
    "for artist, songs in cleaned_lyrics_data.items():\n",
    "    print(f\"Descriptive stats for {artist}'s lyrics:\")\n",
    "    artist_lyrics_tokens = flatten_tokens(songs)  # Flatten all song tokens\n",
    "    stats = descriptive_stats(artist_lyrics_tokens, verbose=True)\n",
    "    print(f\"Top 5 words for {artist}'s lyrics: {stats[4]}\")  # Top 5 words\n",
    "\n",
    "# Call descriptive_stats for twitter data\n",
    "for artist, descriptions in cleaned_twitter_data.items():\n",
    "    print(f\"Descriptive stats for {artist}'s Twitter descriptions:\")\n",
    "    artist_twitter_tokens = flatten_tokens({'desc': desc for desc in descriptions})  # Flatten all descriptions\n",
    "    stats = descriptive_stats(artist_twitter_tokens, verbose=True)\n",
    "    print(f\"Top 5 words for {artist}'s Twitter descriptions: {stats[4]}\")  # Top 5 words"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "46294409",
   "metadata": {},
   "source": [
    "Q: How do you think the \"top 5 words\" would be different if we left stopwords in the data? \n",
    "\n",
    "A: If stopwords were left in the data, the top 5 words would be completely different and dominated as they're more frequent. They are simultaneously less insightful and would provide less clarity on the topics the arists cover. \n",
    "\n",
    "---\n",
    "\n",
    "Q: What were your prior beliefs about the lexical diversity between the artists? Does the difference (or lack thereof) in lexical diversity between the artists conform to your prior beliefs? \n",
    "\n",
    "A: I previously believed Cher would exhibit more lexical diversity due to her longer career and overall, more experience. However, the above data shows that Robyn's lyrics are slightly more lexically diverse than Cher's. \n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4d4e1ac1",
   "metadata": {},
   "source": [
    "\n",
    "## Specialty Statistics\n",
    "\n",
    "The descriptive statistics we have calculated are quite generic. You will now calculate a handful of statistics tailored to these data.\n",
    "\n",
    "1. Ten most common emojis by artist in the twitter descriptions.\n",
    "1. Ten most common hashtags by artist in the twitter descriptions.\n",
    "1. Five most common words in song titles by artist. \n",
    "1. For each artist, a histogram of song lengths (in terms of number of tokens) \n",
    "\n",
    "We can use the `emoji` library to help us identify emojis and you have been given a function to help you.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "753a5a3e",
   "metadata": {},
   "outputs": [],
   "source": [
    "assert(emoji.is_emoji(\"❤️\"))\n",
    "assert(not emoji.is_emoji(\":-)\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "986fc4c0",
   "metadata": {},
   "source": [
    "### Emojis 😁\n",
    "\n",
    "What are the ten most common emojis by artist in the twitter descriptions? \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "269cd433",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Top 10 emojis for cher_followers_data: [('❤', 94506), ('🌈', 66291), ('♥', 48059), ('🏳', 47174), ('✨', 45846), ('🌊', 31234), ('💙', 31050), ('🏻', 25195), ('✌', 21963), ('💜', 21571)]\n",
      "Top 10 emojis for robynkonichiwa_followers_data: [('🌈', 6086), ('❤', 5635), ('🏳', 4641), ('♥', 4249), ('✨', 3217), ('🏻', 1751), ('✌', 1495), ('♀', 1347), ('🏼', 1340), ('💙', 1200)]\n",
      "Top 10 emojis for cher_followers: []\n",
      "Top 10 emojis for robynkonichiwa_followers: []\n"
     ]
    }
   ],
   "source": [
    "def extract_emojis(text):\n",
    "    return [char for char in text if char in emoji.EMOJI_DATA]\n",
    "\n",
    "def most_common_emojis_by_artist(twitter_data):\n",
    "    common_emojis = {}\n",
    "    \n",
    "    for artist, descriptions in twitter_data.items():\n",
    "        all_emojis = []\n",
    "        for description in descriptions:\n",
    "            all_emojis.extend(extract_emojis(description))\n",
    "        \n",
    "        emoji_counter = Counter(all_emojis)\n",
    "        common_emojis[artist] = emoji_counter.most_common(10)\n",
    "    \n",
    "    return common_emojis\n",
    "\n",
    "common_emojis = most_common_emojis_by_artist(twitter_data)\n",
    "\n",
    "for artist, emojis in common_emojis.items():\n",
    "    print(f\"Top 10 emojis for {artist}: {emojis}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bab9b770",
   "metadata": {},
   "source": [
    "### Hashtags\n",
    "\n",
    "What are the ten most common hashtags by artist in the twitter descriptions? \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "07c396f1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Top 10 hashtags for cher_followers_data: [('#BLM', 10100), ('#Resist', 6161), ('#BlackLivesMatter', 4888), ('#resist', 3860), ('#FBR', 3330), ('#1', 3111), ('#TheResistance', 3044), ('#blacklivesmatter', 2738), ('#Resistance', 1953), ('#RESIST', 1878)]\n",
      "Top 10 hashtags for robynkonichiwa_followers_data: [('#BlackLivesMatter', 356), ('#BLM', 345), ('#1', 228), ('#blacklivesmatter', 222), ('#music', 175), ('#Music', 114), ('#EDM', 87), ('#LGBTQ', 76), ('#blm', 60), ('#TeamFollowBack', 59)]\n",
      "Top 10 hashtags for cher_followers: []\n",
      "Top 10 hashtags for robynkonichiwa_followers: []\n"
     ]
    }
   ],
   "source": [
    "def extract_hashtags(text):\n",
    "    return re.findall(r\"#\\w+\", text)\n",
    "\n",
    "def most_common_hashtags_by_artist(twitter_data):\n",
    "    common_hashtags = {}\n",
    "    \n",
    "    for artist, descriptions in twitter_data.items():\n",
    "        all_hashtags = []\n",
    "        for description in descriptions:\n",
    "            all_hashtags.extend(extract_hashtags(description))\n",
    "        \n",
    "        hashtag_counter = Counter(all_hashtags)\n",
    "        common_hashtags[artist] = hashtag_counter.most_common(10)\n",
    "    \n",
    "    return common_hashtags\n",
    "\n",
    "common_hashtags = most_common_hashtags_by_artist(twitter_data)\n",
    "\n",
    "for artist, hashtags in common_hashtags.items():\n",
    "    print(f\"Top 10 hashtags for {artist}: {hashtags}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d10f21d5",
   "metadata": {},
   "source": [
    "### Song Titles\n",
    "\n",
    "What are the five most common words in song titles by artist? The song titles should be on the first line of the lyrics pages, so if you have kept the raw file contents around, you will not need to re-read the data.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "bb69b36b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Top 5 words in song titles for robyn: [('Me', 7), ('You', 7), ('The', 7), ('My', 6), ('To', 6)]\n",
      "Top 5 words in song titles for cher: [('The', 29), ('To', 28), ('\"The', 24), ('Of', 21), ('\"I', 21)]\n"
     ]
    }
   ],
   "source": [
    "def extract_first_line(text):\n",
    "    return text.split('\\n', 1)[0]\n",
    "\n",
    "def most_common_words_in_song_titles(lyrics_data):\n",
    "    common_words = {}\n",
    "    \n",
    "    for artist, songs in lyrics_data.items():\n",
    "        all_words = []\n",
    "        for song_title, lyrics in songs.items():\n",
    "            first_line = extract_first_line(lyrics)\n",
    "            words = first_line.split()\n",
    "            all_words.extend(words)\n",
    "        \n",
    "        word_counter = Counter(all_words)\n",
    "        common_words[artist] = word_counter.most_common(5)\n",
    "    \n",
    "    return common_words\n",
    "\n",
    "common_words_in_titles = most_common_words_in_song_titles(lyrics_data)\n",
    "\n",
    "for artist, words in common_words_in_titles.items():\n",
    "    print(f\"Top 5 words in song titles for {artist}: {words}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5dd4fd71",
   "metadata": {},
   "source": [
    "### Song Lengths\n",
    "\n",
    "For each artist, a histogram of song lengths (in terms of number of tokens). If you put the song lengths in a data frame with an artist column, matplotlib will make the plotting quite easy. An example is given to help you out. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "805a1e52",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "artist\n",
       "Artist 1    Axes(0.125,0.11;0.775x0.77)\n",
       "Artist 2    Axes(0.125,0.11;0.775x0.77)\n",
       "Name: length, dtype: object"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "num_replicates = 1000\n",
    "\n",
    "df = pd.DataFrame({\n",
    "    \"artist\" : ['Artist 1'] * num_replicates + ['Artist 2']*num_replicates,\n",
    "    \"length\" : np.concatenate((np.random.poisson(125,num_replicates),np.random.poisson(150,num_replicates)))\n",
    "})\n",
    "\n",
    "df.groupby('artist')['length'].plot(kind=\"hist\",density=True,alpha=0.5,legend=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "81a5806d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def get_song_lengths(lyrics_data):\n",
    "    song_lengths = []\n",
    "    for artist, songs in lyrics_data.items():\n",
    "        for song_title, lyrics in songs.items():\n",
    "            tokens = lyrics.split()\n",
    "            song_lengths.append({\"artist\": artist, \"length\": len(tokens)})\n",
    "    return song_lengths\n",
    "\n",
    "song_lengths = get_song_lengths(lyrics_data)\n",
    "\n",
    "df = pd.DataFrame(song_lengths)\n",
    "\n",
    "df.groupby('artist')['length'].plot(kind=\"hist\", density=True, alpha=0.5, legend=True)\n",
    "plt.xlabel('Song Length (Number of Tokens)')\n",
    "plt.ylabel('Density')\n",
    "plt.title('Histogram of Song Lengths by Artist')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8fde9ebb",
   "metadata": {},
   "source": [
    "Since the lyrics may be stored with carriage returns or tabs, it may be useful to have a function that can collapse whitespace, using regular expressions, and be used for splitting. \n",
    "\n",
    "Q: What does the regular expression `'\\s+'` match on? \n",
    "\n",
    "A: Matches one or more whitespace characters\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "f0e34516",
   "metadata": {},
   "outputs": [],
   "source": [
    "collapse_whitespace = re.compile(r'\\s+')\n",
    "\n",
    "def tokenize_lyrics(lyric) : \n",
    "    \"\"\"strip and split on whitespace\"\"\"\n",
    "    return([item.lower() for item in collapse_whitespace.split(lyric)])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "2294c440",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "def collapse_whitespace(text):\n",
    "    return re.sub(r'\\s+', ' ', text).strip()\n",
    "\n",
    "def get_song_lengths(lyrics_data):\n",
    "    song_lengths = []\n",
    "    for artist, songs in lyrics_data.items():\n",
    "        for song_title, lyrics in songs.items():\n",
    "            lyrics = collapse_whitespace(lyrics)\n",
    "            tokens = lyrics.split()\n",
    "            song_lengths.append({\"artist\": artist, \"length\": len(tokens)})\n",
    "    return song_lengths\n",
    "\n",
    "song_lengths = get_song_lengths(lyrics_data)\n",
    "\n",
    "df = pd.DataFrame(song_lengths)\n",
    "\n",
    "df.groupby('artist')['length'].plot(kind=\"hist\", density=True, alpha=0.5, legend=True)\n",
    "plt.xlabel('Song Length (Number of Tokens)')\n",
    "plt.ylabel('Density')\n",
    "plt.title('Histogram of Song Lengths by Artist')\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
